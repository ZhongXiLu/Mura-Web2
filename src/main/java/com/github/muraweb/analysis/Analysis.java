package com.github.muraweb.analysis;

import org.hibernate.annotations.CreationTimestamp;

import javax.persistence.*;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Represents a single analysis performed by MuRa.
 */
@Entity
@Table(name = "analysis")
public class Analysis {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;

    /**
     * Name of the GitHub repository.
     */
    private String repoName;

    /**
     * The link to the GitHub repository.
     */
    private String gitRepo;

    /**
     * Name of the report file generated by MuRa.
     */
    private String report;

    /**
     * Name of the mutants file generated by MuRa.
     */
    private String mutants;

    /**
     * The time the analysis has started.
     */
    @CreationTimestamp
    private ZonedDateTime startTime;

    /**
     * Bool indicating whether the analysis has finished or not.
     */
    private boolean finished = false;

    /**
     * Bool indicating whether the analysis went successful.
     */
    private boolean successful;

    /**
     * The error message if the analysis did not went successful.
     */
    private String errorMessage = "";

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getGitRepo() {
        return gitRepo;
    }

    public void setGitRepo(String gitRepo) {
        this.gitRepo = gitRepo;
    }

    public String getReport() {
        return report;
    }

    public void setReport(String report) {
        this.report = report;
    }

    public String getMutants() {
        return mutants;
    }

    public void setMutants(String mutants) {
        this.mutants = mutants;
    }

    public String getRepoName() {
        return repoName;
    }

    public void setRepoName(String repoName) {
        this.repoName = repoName;
    }

    public boolean isSuccessful() {
        return successful;
    }

    public void setSuccessful(boolean successful) {
        this.successful = successful;
    }

    public String getErrorMessage() {
        return errorMessage;
    }

    public void setErrorMessage(String errorMessage) {
        this.errorMessage = errorMessage;
    }

    public String getStartTime() {
        return startTime.format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm z"));
    }

    public void setStartTime(ZonedDateTime startTime) {
        this.startTime = startTime;
    }

    public boolean isFinished() {
        return finished;
    }

    public void setFinished(boolean finished) {
        this.finished = finished;
    }
}
